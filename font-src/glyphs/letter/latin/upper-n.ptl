$$include '../../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../../support/utils'
import [DesignParameters] from '../../../meta/aesthetics'
import [Dotless CvDecompose] from "../../../support/gr"

glyph-module

glyph-block Letter-Latin-Upper-N : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Marks : markHalfStroke

	define SLAB-AUTO   1
	define SLAB-MOTION 2

	define [StdNSerifs top left right sw xn] : glyph-proc
		include : tagged 'serifLT'
			LeftwardTopSerif left top (xn * Jut - 0.5 * sw * HVContrast)
		include : tagged 'serifRB'
			CenterTopSerif (right - 0.5 * sw * HVContrast) top (xn * Jut)
		include : tagged 'serifLB'
			CenterBottomSerif (left + 0.5 * sw * HVContrast) 0 (xn * Jut)

	define [NShape] : params [slabType top left right [crowd 2] [crDiag 4] [xn 1]] : glyph-proc
		local swDiag : AdviceStroke crDiag
		local stroke : AdviceStroke crowd

		include : union
			dispiro
				flat left 0 [widths.heading 0 stroke Upward]
				curl left (top * 0.4) [heading Upward]
				straight.up.end left top [widths.heading 0 swDiag Upward]
			dispiro
				flat right top [widths.heading 0 stroke Downward]
				curl right (top * 0.6) [heading Downward]
				straight.down.end right 0 [widths.heading 0 swDiag Downward]
			dispiro
				flat (left + swDiag / 2) top [widths.heading swDiag 0 Downward]
				curl (right - swDiag / 2) 0 [widths.heading 0 swDiag Downward]

		include : match slabType
			[Just SLAB-AUTO]   : if SLAB [StdNSerifs top left right stroke xn] [glyph-proc]
			[Just SLAB-MOTION] : tagged 'serifLT' : LeftwardTopSerif left top SideJut

	define NConfig : object
		standard                 { SLAB-AUTO   }
		motionSerifed            { SLAB-MOTION   }

	do : foreach { suffix { slabType } } [Object.entries NConfig] : do
		create-glyph "N.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : NShape slabType CAP SB RightSB
			set-base-anchor 'trailing' (RightSB - markHalfStroke) 0

		create-glyph "Nltail.\(suffix)" : glyph-proc
			include [refer-glyph "N.\(suffix)"] AS_BASE ALSO_METRICS
			eject-contour 'serifLB'
			include : VerticalHook (SB + HalfStroke * HVContrast) 0 (-HookX) Hook

		create-glyph "smcpN.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : NShape slabType XH SB RightSB
			set-base-anchor 'trailing' (RightSB - markHalfStroke) 0


	select-variant 'N' 'N'
	alias 'grek/Nu' 0x39D 'N'
	select-variant 'smcpN' 0x274 (follow -- 'N')
	select-variant 'Nltail' 0x19D  (follow -- 'N')

	create-glyph 'currency/nairaSign' 0x20A6 : glyph-proc
		include : NShape SLAB-AUTO CAP (SB * 1.25) (Width - SB * 1.25) 3.5 4
		define sw : AdviceStroke2 2 4 CAP
		define gap : Math.max (CAP / 6) sw
		include : HBarBottom [mix 0 SB 0.5] [mix Width RightSB 0.5] (CAP / 2 + gap / 2) sw
		include : HBarTop    [mix 0 SB 0.5] [mix Width RightSB 0.5] (CAP / 2 - gap / 2) sw

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/N' 0x2115 : glyph-proc
		include : MarkSet.capital
		include : VBarLeft SB 0 CAP BBS
		include : VBarRight RightSB 0 CAP BBS
		include : intersection
			Rect CAP 0 SB RightSB
			union
				dispiro
					widths.center BBS
					corner (SB + BBS * HVContrast) CAP
					corner (RightSB - BBS * HVContrast / 2) (CAP / 5)
				dispiro
					widths.center BBS
					corner (SB + BBS * HVContrast / 2) (CAP - (CAP / 5))
					corner (RightSB - BBS * HVContrast) 0

	create-glyph 'numero' 0x2116 : glyph-proc
		local fine : AdviceStroke 4.5
		include : OShape XH [Math.max (fine * 2) (CAP * 0.1)] (Middle + [Math.max (fine / 2) ((RightSB - SB) * 0.1)]) [mix RightSB Width 0.5] fine (SmoothA * fine / Stroke) (SmoothB * fine / Stroke)
		include : NShape SLAB-AUTO CAP (SB / 2) Middle (crowd -- 4.5) (crDiag -- 5.5) (xn -- 0.7)
		include : HBarBottom (Middle + fine / 2) [mix RightSB Width 0.5] 0 fine
